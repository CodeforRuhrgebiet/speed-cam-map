{"version":3,"sources":["main.js"],"names":["window","document","L","undefined","$loading","getElementById","streetLayer","map","removeLayer","styles","base","color","weight","mouseover","selectedStreetSegments","stroke","geoJson","tags","name","onEachFeature","feature","properties","content","maxspeed","sticky","layer","on","e","openPopup","length","forEach","f","setStyle","getLayers","filter","l","target","addTo","callbacks","fileName","dateToFileName","date","req","loadDataLayer","showLoadingScreen","onreadystatechange","hideLoadingScreen","onError","readyState","status","data","JSON","parse","responseText","addDataLayerToMap","open","send","split","checkDate","dateObj","day","getDay","showInfoLayer","$infolayer","classList","contains","height","remove","getBoundingClientRect","style","hideInfoLayer","setTimeout","add","moment","minDate","querySelector","bounds","center","zoom","maxBounds","Icon","Default","baseLayer","tileLayer","minZoom","maxZoom","attribution","datePicker","flatpickr","defaultDate","dateFormat","enableTime","locale","firstDayOfWeek","onReady","dateStr","selectedDates","instance","parseDate","onChange","onSuccess","value","addEventListener","currentDate","subtract","newDate","setDate","format"],"mappings":"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","file":"main.min.js","sourcesContent":["/*jslint browser: true*/\r\n/*global L, flatpickr */\r\n\r\n(function (window, document, L, undefined) {\r\n\r\n'use strict';\r\n\r\nconst minDate = '26.06.2017';\r\n\r\nmoment.locale('de');\r\n\r\nconst $infolayer = document.querySelector('.js-infolayer');\r\nconst $loading = document.getElementById('js-loading');\r\n\r\nfunction addDataLayerToMap(map, data) {\r\n\r\n  // remove active street layer, if any is set\r\n  if (streetLayer !== null) {\r\n    map.removeLayer(streetLayer);\r\n  }\r\n\r\n  let styles = {\r\n    base: { color: '#ff335b', weight: 3 },\r\n    mouseover: { color: '#ff0000' }\r\n  };\r\n\r\n  let selectedStreetSegments = [];\r\n\r\n\tstreetLayer = L.geoJson(data, {\r\n    stroke: true,\r\n    color: styles.base.color,\r\n    weight: styles.base.weight,\r\n    onEachFeature: (feature, layer) => {\r\n      let content = feature.properties.tags.name;\r\n      let maxspeed = feature.properties.tags.maxspeed;\r\n      content += (maxspeed) ? ` (${maxspeed} km/h)` : '';\r\n\r\n      layer.bindPopup(content, {\r\n        sticky: true\r\n      });\r\n\r\n      layer.on('mouseover', (e) => {\r\n        layer.openPopup();\r\n        // reset selected segments, if any\r\n        if (selectedStreetSegments.length > 0) {\r\n          selectedStreetSegments.forEach((f) => f.setStyle(styles.base));\r\n        }\r\n        selectedStreetSegments = streetLayer.getLayers().filter((l) => {\r\n          return l.feature.properties.tags.name === e.target.feature.properties.tags.name;\r\n        });\r\n        selectedStreetSegments.forEach((l) => {\r\n          l.setStyle(styles.mouseover);\r\n        });\r\n\r\n      });\r\n\r\n      layer.on('mouseout', (e) => {});\r\n     }\r\n  });\r\n\r\n\tstreetLayer.addTo(map);\r\n}\r\n\r\nfunction loadDataLayer(date, callbacks) {\r\n\r\n  var fileName = dateToFileName(date);\r\n  const req = new XMLHttpRequest();\r\n\r\n  showLoadingScreen();\r\n\r\n  req.onreadystatechange = () => {\r\n    if (req.readyState === 4 && req.status === 404) {\r\n      hideLoadingScreen();\r\n      if (callbacks && callbacks.onError) {\r\n        callbacks.onError();\r\n      }\r\n      return;\r\n    }\r\n    if (req.readyState === 4 && req.status === 200) {\r\n      const data = JSON.parse(req.responseText);\r\n      hideLoadingScreen();\r\n      addDataLayerToMap(map, data);\r\n      if (callbacks && callbacks.onSuccess) {\r\n        callbacks.onSuccess();\r\n      }\r\n    }\r\n  };\r\n\r\n  req.open('GET', 'geojson/' + fileName + '.json', true);\r\n  req.send();\r\n}\r\n\r\nfunction dateToFileName(date) {\r\n  date = date.split('.');\r\n  return date[2]+'-'+date[1]+'-'+date[0];\r\n}\r\n\r\nfunction checkDate(dateObj) {\r\n  const day = dateObj.getDay();\r\n  if (day === 6 || day === 0) return false;\r\n\r\n  return true;\r\n}\r\n\r\nfunction showInfoLayer() {\r\n  // do not animate again, if already visible\r\n  if (!$infolayer.classList.contains('is-hidden')) {\r\n    return;\r\n  }\r\n  let height = null;\r\n\r\n  $infolayer.classList.remove('is-hidden');\r\n  height = $infolayer.getBoundingClientRect().height;\r\n  $infolayer.style.height = 0;\r\n\r\n  window.setTimeout(function() {\r\n    $infolayer.style.height = height + 'px';\r\n  }, 20);\r\n}\r\n\r\nfunction hideInfoLayer() {\r\n  // do not animate again, if element is already hidden\r\n  if ($infolayer.classList.contains('is-hidden')) {\r\n    return;\r\n  }\r\n  $infolayer.style.height = 0;\r\n\r\n  window.setTimeout(function() {\r\n    $infolayer.classList.add('is-hidden');\r\n    $infolayer.style.height = null;\r\n  }, 500);\r\n}\r\n\r\nfunction showLoadingScreen() {\r\n  $loading.classList.remove('hidden');\r\n}\r\n\r\nfunction hideLoadingScreen() {\r\n  $loading.classList.add('hidden');\r\n}\r\n\r\n// instance of current street layer\r\nlet streetLayer = null;\r\n\r\nlet bounds = [\r\n  [51.291124, 6.405716],\r\n  [51.60693, 7.630692]\r\n];\r\n\r\n// create leaflet map\r\nlet map = L.map('map', {\r\n  center: [51.457087, 7.011429],\r\n  zoom: 12,\r\n  maxBounds: bounds\r\n});\r\n\r\nL.Icon.Default.imagePath = 'images/';\r\n\r\n// add default stamen tile layer\r\nlet baseLayer = new L.tileLayer('http://{s}.tile.stamen.com/toner/{z}/{x}/{y}.png', {\r\n  minZoom: 12,\r\n  maxZoom: 18,\r\n  bounds: bounds,\r\n  attribution: 'Daten zu Geschwindigkeitskontrollen: <a href=\"http://www.use24.essen.de/Webportal/agency/default.aspx?PortalObjectId=18399&OrganizationUnitId=1426\">Ordnungsamt der Stadt Essen</a>. Kartendaten Â© <a href=\"http://www.openstreetmap.org\">OpenStreetMap contributors</a>'\r\n});\r\nbaseLayer.addTo(map);\r\n\r\nlet datePicker = flatpickr('#js-date-picker', {\r\n  defaultDate: 'today',\r\n  dateFormat: 'd.m.Y',\r\n  minDate: minDate,\r\n  enableTime: false,\r\n  locale: {\r\n    firstDayOfWeek: 1\r\n  },\r\n  // load data for today\r\n  onReady: (selectedDates, dateStr, instance) => {\r\n    if (dateStr !== '') {\r\n      if (checkDate(instance.parseDate(dateStr))) {\r\n        loadDataLayer(dateStr);\r\n      }\r\n      else {\r\n        showInfoLayer();\r\n      }\r\n    }\r\n  },\r\n  onChange: (selectedDates, dateStr, instance) => {\r\n    if (dateStr !== '') {\r\n      if (!checkDate(instance.parseDate(dateStr))) {\r\n        showInfoLayer();\r\n        if (streetLayer !== null) {\r\n          map.removeLayer(streetLayer);\r\n        }\r\n        return;\r\n      }\r\n      loadDataLayer(dateStr, {\r\n        onSuccess: function() {\r\n          hideInfoLayer();\r\n        },\r\n        onError: function() {\r\n          showInfoLayer();\r\n          if (streetLayer !== null) {\r\n            map.removeLayer(streetLayer);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n});\r\n\r\ndocument.getElementById('js-prev-date').addEventListener('click', (e) => {\r\n  let value = document.getElementById('js-date-picker').value;\r\n  let currentDate = moment(value, 'DD.MM.YYYY');\r\n  let newDate = currentDate.subtract(1, 'd');\r\n  datePicker.setDate(newDate.format('DD.MM.YYYY'), true);\r\n});\r\n\r\ndocument.getElementById('js-next-date').addEventListener('click', (e) => {\r\n  let value = document.getElementById('js-date-picker').value;\r\n  let currentDate = moment(value, 'DD.MM.YYYY');\r\n  let newDate = currentDate.add(1, 'd');\r\n  datePicker.setDate(newDate.format('DD.MM.YYYY'), true);\r\n});\r\n\r\n}(window, document, L));\r\n"]}